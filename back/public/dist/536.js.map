{"version":3,"file":"536.js","mappings":"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","sources":["webpack://blooways-front/./node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!Array.isArray(data) && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                copy[key] = cloneObject(data[key]);\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\n    ? name === signalName\n    : !name ||\n        !signalName ||\n        name === signalName ||\n        convertToArrayPayload(name).some((currentName) => currentName &&\n            (currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    return {\n        field: {\n            name,\n            value,\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f && callback(_f.name)) {\n                if (_f.ref.focus) {\n                    _f.ref.focus();\n                    break;\n                }\n                else if (_f.refs && _f.refs[0].focus) {\n                    _f.refs[0].focus();\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                focusFieldBy(currentField, callback);\n            }\n        }\n    }\n};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (!isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError ? !error && existingError.type : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\n        control._names.focus = '';\n        control._updateValid();\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema();\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                error = errorLookupResult.error;\n                name = errorLookupResult.name;\n                isValid = isEmptyObject(errors);\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                isFieldValueUpdated =\n                    isNaN(fieldValue) ||\n                        fieldValue === get(_formValues, name, fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        field\n            ? disabledIsDefined &&\n                set(_formValues, name, options.disabled\n                    ? undefined\n                    : get(_formValues, name, getFieldValue(field._f)))\n            : updateValidAndValue(name, true, options.value);\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.shouldUseNativeValidation\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues || _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneUpdatedValues;\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitting: false,\n            isSubmitSuccessful: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, control._defaultValues)) {\n            control._reset(props.values, control._options.resetOptions);\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","appendErrors","validateAllFieldCriteria","errors","message","types","focusFieldBy","fields","callback","fieldsNames","field","_f","currentField","ref","focus","refs","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","disabled","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","next","observer","subscribe","push","unsubscribe","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","props","flushRootRender","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_state","action","unMount","array","timer","_subjects","state","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","shouldSkipValidation","deps","watched","fieldState","previousErrorLookupResult","errorLookupResult","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","shouldRenderByError","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","_getFieldArray","_resetDefaultValues","then","_updateFormState","handleSubmit","onValid","onInvalid","e","preventDefault","persist","payload","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","useForm","_formControl","current","_props","subscription","subject","useSubscribe"],"sourceRoot":""}